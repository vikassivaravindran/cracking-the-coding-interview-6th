Recursive(draw trees) & DP
DP is mostly just a matter of taking a recursive algorithm and finding the
overlapping subproblems(the repeated calls).Then cache those results for 
future recursive calls.
recursive:bottom-top
DP:save recursive results
Fibonacci DP:
int fibo(int n)
{
   if(n==0||n==1)
      return n;
    int[] f=new int[n];
    f[0]=0;
    f[1]=1;
    for(int i=2;i<n;i++)
      f[i]=f[i-1]+f[i-2];
    return f[n-1]+f[n-2];
} 

8.1
int count(int n)
{
   int m=new int[n+1];
   Arrays.fill(m,-1);
   return count(n,m);
}

int count(int n,int[] m)
{
   if(n<0)
      return 0;
   else if(n==0)
       return 1;
    else if(m[n]>-1)
       return m[n];
    else
    {
       m[n]=count(n-1,m)+count(n-2,m)+count(n-3,m);
    }
}
O(n^3),will stack overflow, long may be better, but a BigInteger class is the best)

8.2
ArrayList<Point> getP(boolean[][] m)
{
  if(m==null||m.length==0)
    return null;
  ArrayList<Point> path=new ArrayList<Point>();
  HashSet<Point> fail=new HashSet<Point>();
  if(getP(m,m.length-1,m[0].length-1,path,fail))
    return path;
  return null;
}

boolean getP(boolean[][] m,int row,int col,ArrayList<Point> path,HashSet<Point> fail)
{
   if(row<0||col<0||!m[row][col])
     return false;
   Point p=new Point(row,col);
   if(fail.contains(p))
      return false;
    boolean isO=(row==0)&&(col==0);
    if(isO||getP(m,row,col-1,path,fail)||getP(m,row-1,col,path,fail))
      {
        path.add(p);
        return true;
      }
      fail.add(p);
      return false;
}

8.4
subsets
each element is yes or no for get in, use binary number.
ArrayList<ArrayList<Integer>> getSub(ArrayList<Integer> set)
{
   ArrayList<ArrayList<Integer>> all=new ArrayList<ArrayList<Integer>>();
   int max=1<<all.size();
   for(int k=0;k<max;k++)
   {
     ArrayList<Integer> al=convertIntToSet(k,set);
     all.add(al);
   }
   return all;
}

ArrayList<Integer> convertIntToSet(int x,ArrayList<Integer> set)
{
   ArrayList<Integer> sub=new ArrayList<Integer>();
   int index=0;
   for(int k=0;k>0;k>>1)
   {
      if((k&1)==1)
        sub.add(set.get(index));
      index++;
   }
   return sub;
}

8.5
recursive mulpiple
int Mul(int x,int y)
{
   if(x==1)
     return y;
   else if(y==1)
     return x;
   else if(x==2)
     return y+y;
   else if(y==2)
     return x+x;
    else 
      return x+x+Mul(x,y-2);
}

8.6 
Hanoi

8.7
All permutations.
ArrayList<String> getP(String str)
{
  if(str==null)
    return null;
  ArrayList<String> per=new ArrayList<String>();
  if(str.length()==0){
    per.add(str);
    return per;
    }
    
    char first=str.charAt(0);
    String remain=str.substring(1);
    ArrayList<String> words=getP(remain);
    for(String word:words)
    {
      for(int j=0;j<=word.length();j++)
      {
        String s=insertCharAt(word,first,j);
        per.add(s);
      }
    }
    return per;
}

String insertCharAt(String s,char c,int i)
{
  String start=s.substring(0,i);
  String end=s.substring(i);
  return start+c+end;
}

8.8
delete dup.
ArrayList<String> p(String s)
{
  ArrayList<String> r=new ArrayList<String>();
  HashMap<Character,Integer> map=build(s);
  p(map,"",s.length(),r);
  return r;
}

HashMap<Character,Integer> build(String s)
{
  HashMap<Character,Integer> map=new HashMap<Character,Integer>();
  for(char c:s.toCharArray())
  {
    if(!map.containsKey(c))
      map.put(c,0);
    map.put(c,map.get(c)+1);
  }
  return map;
}

void p(HashMap<Character,Integer> map,String pre,int re,ArrayList<String> r)
{
   if(re==0)
    {
      r.add(prefix);
      return;
    }
    for(char c:s.toCharArray())
    {
       int count=map.get(c);
       if(count>0)
       {
         map.put(c,count-1);
         p(map,prefix+c,re-1,r);
         map.put(c,count);
       }
    }
}

8.9
public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        backtrack(list, "", 0, 0, n);
        return list;
    }
    
    public void backtrack(List<String> list, String str, int open, int close, int max){
        
        if(str.length() == max*2){
            list.add(str);
            return;
        }
        
        if(open < max)
            backtrack(list, str+"(", open+1, close, max);
        if(close < open)
            backtrack(list, str+")", open, close+1, max);
    }
    
8.11
makeCharge!
int makeChange(int n)
{
   int denoms={25,10,5,1};
   int[][] map=new int[n+1][denoms.length];
   return makeChange(n,denoms,0,map);
}

int makeChange(int amount, int[] denoms, int index, int[][] map)
{
   if(map[amount][index]>0)
     return map[amount][index];
   if(index>=denoms.length-1) 
        return 1;
   int denomAmount=denoms[index];
   int ways=0;
   for(int i=0;i*denomAmount<=amount;i++)
   {
     int re=amount-i*denomAmount;
     ways+=makeChange(re,denoms,index+1,map);
   }
   map[amount][index]=ways;
   return ways;
}

8.12
8 queens
int SIZE=8;
void playqueen(int row, Integer[] columns, ArrayList<Integer[]> re)
{
  if(row==SIZE)
    re.add(columns.clone());
  else
  {
     for(int col=0;col<SIZE;col++)
     {
       if(CheckValid(columns,row,col))
       {
         columns[row]=col;
         playqueen(row+1,columns,re);
       }
     }
  }
}

boolean CheckValid(Integer[] columns,int row1,int column1)
{
  for(int row2=0;row2<row1;row2++)
  {
     int column2=columns[row2];
     if(column1==column2)
       return false;
     int cd=Math.abs(column1-column2);
    int rowDistance=row1-row2;
    if(cd==rowDistance)
       return false;
  }
  return true;
}
