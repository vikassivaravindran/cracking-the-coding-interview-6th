leetcode 547
dfs
public class Solution {
    public void dfs(int[][] M, int[] visited, int i) {
        for (int j = 0; j < M.length; j++) {
            if (M[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(M, visited, j);
            }
        }
    }
    public int findCircleNum(int[][] M) {
        int[] visited = new int[M.length];
        int count = 0;
        for (int i = 0; i < M.length; i++) {
            if (visited[i] == 0) {
                dfs(M, visited, i);
                count++;
            }
        }
        return count;
    }
}

leetcode22
backtracking
public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        backtrack(list, "", 0, 0, n);
        return list;
    }
    
    public void backtrack(List<String> list, String str, int open, int close, int max){
        
        if(str.length() == max*2){
            list.add(str);
            return;
        }
        
        if(open < max)
            backtrack(list, str+"(", open+1, close, max);
        if(close < open)
            backtrack(list, str+")", open, close+1, max);
    }
   
leetcode583
class Solution {
    public int minDistance(String word1, String word2) 
    {
        if(word1.equals(word2))
            return 0;
      else if((word1==null&&word2==null)||(word1.length()==0&&word2.length()==0))
          return 0;
        else if(word1.length()==0||word1==null)
            return word2.length();
        else if(word2.length()==0||word2==null)
            return word1.length();
        else if(word1.length()==1&&word2.length()==1)
            return 2;
       if(word2.length()>word1.length())
        {
            String mid=word1;
            word1=word2;
            word2=mid;
        }
       return min2(word1,word2);
    }
    private int min2(String word1,String word2)
    {
        if(word1.equals(word2))
            return 0;
        else if((word1==null&&word2==null)||(word1.length()==0&&word2.length()==0))
          return 0;
        else if(word1.length()==0||word1==null)
            return word2.length();
        else if(word2.length()==0||word2==null)
            return word1.length();
        else if(word1.length()==1&&word2.length()==1)
            return 2;
        else{
        if(word1.charAt(0)==word2.charAt(0))
            return min2(word1.substring(1,word1.length()),word2.substring(1,word2.length()));
        else
        {
            if(word2.length()>1&&word1.length()>1)
            {
                if(word2.charAt(1)==word1.charAt(0))
                    return min2(word1,word2.substring(1,word2.length()))+1;
                else if(word1.charAt(1)==word2.charAt(0))
                    return min2(word1.substring(1,word1.length()),word2)+1;
                else
                    return min2(word1.substring(1,word1.length()),word2.substring(1,word2.length()))+2;
            }
            else if(word2.length()>1)
            {
                if(word2.charAt(1)==word1.charAt(0))
                    return min2(word1,word2.substring(1,word2.length()))+1;
                else
                    return min2(word1.substring(1,word1.length()),word2.substring(1,word2.length()))+2;
            }
            else
            {
                if(word1.charAt(1)==word2.charAt(0))
                return min2(word1.substring(1,word1.length()),word2)+1;
                else
                return min2(word1.substring(1,word1.length()),word2.substring(1,word2.length()))+2;
            }
        }
        }
    }
}
(unfinished)
dp:
public class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length(), len2 = word2.length();
        if (len1 == 0) return len2;
        if (len2 == 0) return len1;
        
        // dp[i][j] stands for distance of first i chars of word1 and first j chars of word2
        int[][] dp = new int[len1 + 1][len2 + 1];
        for (int i = 0; i <= len1; i++)
            dp[i][0] = i;
        for (int j = 0; j <= len2; j++)
            dp[0][j] = j;
            
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1))
                    dp[i][j] = dp[i - 1][j - 1];
                else
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j - 1] + 2, dp[i - 1][j] + 1), dp[i][j - 1] + 1);
            }
        }
        
        return dp[len1][len2];
    }
} 
