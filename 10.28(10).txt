78subsets
class Solution 
{
    public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    List<Integer> r=new ArrayList<Integer>();
    int[] n=new int[nums.length];
    backtrack(n,0,r,nums,list);
    return list;    
}

private static void backtrack(int[] result,int cur,List<Integer> r,int[] nums,List<List<Integer>> list){
    	    if(cur==result.length)
    	    {
    	    	for(int i=0;i<result.length;i++)
    	    	{
    	    		if(result[i]==1)
    	    			r.add(nums[i]);
    	    	}
                list.add(new ArrayList(r));
    	    	r.clear();
    	       return;
    	    }
    	    for(int i=0;i<2;i++)
    	    {
    	        result[cur]=i;
    	        backtrack(result,cur+1,r,nums,list);
    	    }
}
}

560
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.
public static int subarraySum(int[] nums, int k) 
     {
        	int sum=0;
         int result=0;
         Map<Integer,Integer> pre=new HashMap<Integer,Integer>();
         pre.put(0, 1);
         for(int i=0;i<nums.length;i++)
         {
        	 sum+=nums[i];
        	 if(pre.containsKey(sum-k))
        		 result+=pre.get(sum-k);
        	
        	 pre.put(sum, pre.getOrDefault(sum, 0) + 1);
         }
         return result;
     }
   
62
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
public int uniquePaths(int m, int n) {
        int[][] grid = new int[m][n];
    	    for(int i = 0; i<m; i++){
    	        for(int j = 0; j<n; j++){
    	            if(i==0||j==0)
    	                grid[i][j] = 1;
    	            else
    	                grid[i][j] = grid[i][j-1] + grid[i-1][j];
    	        }
    	    }
    	    return grid[m-1][n-1];
    }
    
394
Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
 public static String decodeString(String s) 
	{
        String res = "";
        Stack<Integer> countStack = new Stack<>();
        Stack<String> resStack = new Stack<>();
        int idx = 0;
        while (idx < s.length()) {
            if (Character.isDigit(s.charAt(idx))) {
                int count = 0;
                while (Character.isDigit(s.charAt(idx))) {
                    count = 10 * count + (s.charAt(idx) - '0');
                    idx++;
                }
                countStack.push(count);
            }
            else if (s.charAt(idx) == '[') {
                resStack.push(res);
                res = "";
                idx++;
            }
            else if (s.charAt(idx) == ']') {
                StringBuilder temp = new StringBuilder (resStack.pop());
                int repeatTimes = countStack.pop();
                for (int i = 0; i < repeatTimes; i++) {
                    temp.append(res);
                }
                res = temp.toString();
                idx++;
            }
            else {
                res += s.charAt(idx++);
            }
        }
        return res;
    }
    
96
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
public int numTrees(int n) {
        int[] dp=new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++)
        {
            dp[i]=0;
            for(int j=1;j<=i;j++)
                dp[i]+=dp[j-1]*dp[i-j];
        }
        return dp[n];
    }
    
309
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
public int maxProfit(int[] prices) 
    {
        int sell = 0, prev_sell = 0, buy = Integer.MIN_VALUE, prev_buy;
        for (int price : prices) 
        {
        prev_buy = buy;
        buy = Math.max(prev_sell - price, prev_buy);
        prev_sell = sell;
        sell = Math.max(prev_buy + price, prev_sell);
        }
        return sell;
    }
    
15
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result=new ArrayList<>();
        for(int i=0;i+2<nums.length;i++)
        {
            if(i>0&&nums[i]==nums[i-1])
                continue;
            int j=i+1;
            int k=nums.length-1;
            int target=-nums[i];
            while(j<k)
            {
                if(nums[j]+nums[k]==target)
                {
                    result.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    j++;
                    k--;
                    while(j<k&&nums[j]==nums[j-1])
                        j++;
                    while(j<k&&nums[k]==nums[k+1])
                        k--;
                }
                else if(nums[j]+nums[k]<target)
                    j++;
                else
                    k--;
            }
        }
        return result;
    }
    
39
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.
public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        cSum(result,new ArrayList<Integer>(), candidates,target,0);
        return result;
    }
    
    private void cSum(List<List<Integer>> result,List<Integer> cur,int[] candidates, int target,int start)
    {
        if(target > 0){
    		for(int i = start; i < candidates.length && target >= candidates[i]; i++){
    			cur.add(candidates[i]);
    			cSum(result, cur, candidates, target - candidates[i], i);
    			cur.remove(cur.size() - 1);
    		}
    	}
    	else if(target == 0 ){
    		result.add(new ArrayList<Integer>(cur));
    	}
    }
    
215
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.
 public int findKthLargest(int[] nums, int k) {
         final int N = nums.length;
        Arrays.sort(nums);
        return nums[N - k];
    }
    
48
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).
 public void rotate(int[][] matrix) {
        if(matrix.length==0)
            return ;
        int n=matrix.length;
        for(int layer=0;layer<n/2;layer++)
        {
            int first=layer;
            int last=n-1-layer;
            for(int i=first;i<last;i++)
            {
                int offset=i-first;
                int top=matrix[first][i];
                matrix[first][i]=matrix[last-offset][first];
                matrix[last-offset][first]=matrix[last][last-offset];
                matrix[last][last-offset]=matrix[i][last];
                matrix[i][last]=top;
            }
        }
    }
