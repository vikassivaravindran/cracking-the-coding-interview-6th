//leetcode227
public int calculate(String s) {
    int len;
    if(s==null || (len = s.length())==0) return 0;
    Stack<Integer> stack = new Stack<Integer>();
    int num = 0;
    char sign = '+';
    for(int i=0;i<len;i++){
        if(Character.isDigit(s.charAt(i))){
            num = num*10+s.charAt(i)-'0';
        }
        if((!Character.isDigit(s.charAt(i)) &&' '!=s.charAt(i)) || i==len-1){
            if(sign=='-'){
                stack.push(-num);
            }
            if(sign=='+'){
                stack.push(num);
            }
            if(sign=='*'){
                stack.push(stack.pop()*num);
            }
            if(sign=='/'){
                stack.push(stack.pop()/num);
            }
            sign = s.charAt(i);
            num = 0;
        }
    }

    int re = 0;
    for(int i:stack){
        re += i;
    }
    return re;
}

//leetcode241
public List<Integer> diffWaysToCompute(String input) {
        List<Integer> ret = new LinkedList<Integer>();
        for (int i=0; i<input.length(); i++) {
            if (input.charAt(i) == '-' ||
                input.charAt(i) == '*' ||
                input.charAt(i) == '+' ) {
                String part1 = input.substring(0, i);
                String part2 = input.substring(i+1);
                List<Integer> part1Ret = diffWaysToCompute(part1);
                List<Integer> part2Ret = diffWaysToCompute(part2);
                for (Integer p1 :   part1Ret) {
                    for (Integer p2 :   part2Ret) {
                        int c = 0;
                        switch (input.charAt(i)) {
                            case '+': c = p1+p2;
                                break;
                            case '-': c = p1-p2;
                                break;
                            case '*': c = p1*p2;
                                break;
                        }
                        ret.add(c);
                    }
                }
            }
        }
        if (ret.size() == 0) {
            ret.add(Integer.valueOf(input));
        }
        return ret;
    }
    
 //leetcode270
 public int closestValue(TreeNode root, double target) {  
          
        int closest = root.val;  
        double min = Double.MAX_VALUE;  
          
        while(root!=null) {  
            if( Math.abs(root.val - target) < min  ) {  
                min = Math.abs(root.val - target);  
                closest = root.val;  
            }  
              
            if(target < root.val) {  
                root = root.left;  
            } else if(target > root.val) {  
                root = root.right;  
            } else {  
                return root.val;  
            }  
        }  
          
        return closest;  
    }  
    
    //leetcode304
    class NumMatrix {
    private int[][] sumRegion;

    public NumMatrix(int[][] matrix) {
    if (matrix.length != 0)  sumRegion = new int[matrix.length + 1][matrix[0].length + 1];
    
    for (int i = 0; i < matrix.length; i++) {
        int sum = 0;
        for (int j = 0; j < matrix[0].length; j++) {
            sum += matrix[i][j];
            sumRegion[i + 1][j + 1] = sum + sumRegion[i][j + 1]; 
        }
    }
}

public int sumRegion(int row1, int col1, int row2, int col2) {
    return sumRegion[row2 + 1][col2 + 1] - sumRegion[row1][col2 + 1] - sumRegion[row2 + 1][col1] + sumRegion[row1][col1];
}
}

//leetcode322
  Map<Integer,Integer> amountDict = new HashMap<Integer,Integer>();
    public int coinChange(int[] coins, int amount) {
        if(amount==0)
            return 0;
        if(amountDict.containsKey(amount))
            return amountDict.get(amount);
        int n = amount+1;
        for(int coin : coins) {
            int curr = 0;
            if (amount >= coin) {
                int next = coinChange(coins, amount-coin);
                if(next >= 0)
                    curr = 1+next;
            }
            if(curr > 0)
                n = Math.min(n,curr);
        }
        int finalCount = (n==amount+1) ? -1 : n;
        amountDict.put(amount,finalCount);
        return finalCount;
    }
    
 //leetcode333
 class Wrapper{
    int size;
    int lower, upper;
    boolean isBST;
 
    public Wrapper(){
        lower = Integer.MAX_VALUE;
        upper = Integer.MIN_VALUE;
        isBST = false;
        size = 0;
    }
} 
public class Solution {
    public int largestBSTSubtree(TreeNode root) {
        return helper(root).size;
    }
 
    public Wrapper helper(TreeNode node){
        Wrapper curr = new Wrapper();
 
        if(node == null){
            curr.isBST= true;
            return curr;
        }
 
        Wrapper l = helper(node.left);
        Wrapper r = helper(node.right);
 
        //current subtree's boundaries
        curr.lower = Math.min(node.val, l.lower);
        curr.upper = Math.max(node.val, r.upper);
 
        //check left and right subtrees are BST or not
        //check left's upper again current's value and right's lower against current's value
        if(l.isBST && r.isBST && l.upper<=node.val && r.lower>=node.val){
            curr.size = l.size+r.size+1;
            curr.isBST = true;
        }else{
            curr.size = Math.max(l.size, r.size);
            curr.isBST  = false;
        }
 
        return curr;
    }
}

//leetcode348
public class TicTacToe {  
    private int[][] rows;  
    private int[][] cols;  
    private int[] diag = new int[2];  
    private int[] adiag = new int[2];  
    private int size;  
  
    /** Initialize your data structure here. */  
    public TicTacToe(int n) {  
        size = n;  
        rows = new int[n][2];  
        cols = new int[n][2];  
    }  
 
    public int move(int row, int col, int player) {  
        rows[row][player-1] ++;  
        if (rows[row][player-1] == size) return player;  
        cols[col][player-1] ++;  
        if (cols[col][player-1] == size) return player;  
        if (row == col) {  
            diag[player-1] ++;  
            if (diag[player-1] == size) return player;  
        }  
        if (row+col==size-1) {  
            adiag[player-1] ++;  
            if (adiag[player-1] == size) return player;  
        }  
        return 0;  
    }  
}  

//leetcode349
public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Set<Integer> intersect = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            if (set.contains(nums2[i])) {
                intersect.add(nums2[i]);
            }
        }
        int[] result = new int[intersect.size()];
        int i = 0;
        for (Integer num : intersect) {
            result[i++] = num;
        }
        return result;
    }
}

//leetcode454
 public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
    Map<Integer, Integer> map = new HashMap<>();
    
    for(int i=0; i<C.length; i++) {
        for(int j=0; j<D.length; j++) {
            int sum = C[i] + D[j];
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
    }
    
    int res=0;
    for(int i=0; i<A.length; i++) {
        for(int j=0; j<B.length; j++) {
            res += map.getOrDefault(-1 * (A[i]+B[j]), 0);
        }
    }
    
    return res;
}

//leetcode449
public class Codec {
    private static final String SEP = ",";
    private static final String NULL = "null";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        if (root == null) return NULL;
        //traverse it recursively if you want to, I am doing it iteratively here
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while (!st.empty()) {
            root = st.pop();
            sb.append(root.val).append(SEP);
            if (root.right != null) st.push(root.right);
            if (root.left != null) st.push(root.left);
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    // pre-order traversal
    public TreeNode deserialize(String data) {
        if (data.equals(NULL)) return null;
        String[] strs = data.split(SEP);
        Queue<Integer> q = new LinkedList<>();
        for (String e : strs) {
            q.offer(Integer.parseInt(e));
        }
        return getNode(q);
    }
    
    // some notes:
    //   5
    //  3 6
    // 2   7
    private TreeNode getNode(Queue<Integer> q) { //q: 5,3,2,6,7
        if (q.isEmpty()) return null;
        TreeNode root = new TreeNode(q.poll());//root (5)
        Queue<Integer> samllerQueue = new LinkedList<>();
        while (!q.isEmpty() && q.peek() < root.val) {
            samllerQueue.offer(q.poll());
        }
        //smallerQueue : 3,2   storing elements smaller than 5 (root)
        root.left = getNode(samllerQueue);
        //q: 6,7   storing elements bigger than 5 (root)
        root.right = getNode(q);
        return root;
    }
}

//leetcode443
public int compress(char[] chars) {        
        int start = 0;
        for(int end = 0, count = 0; end < chars.length; end++) {
            count++;
            if(end == chars.length-1 || chars[end] != chars[end + 1] ) {
                chars[start] = chars[end]; 
                start++;
                if(count != 1) {
                    char[] arr = String.valueOf(count).toCharArray();
                    for(int i=0;i<arr.length;i++, start++)
                        chars[start] = arr[i];
                }
                count = 0;
            }
            
//leetcode518
 public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;
        for (int coin : coins) {
            for (int i = 1; i <= amount; i++) {
                if (i >= coin) dp[i] += dp[i - coin];
            }
        }
        return dp[amount];
    }
    
//leetcode567
 public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length(), len2 = s2.length();
        if (len1 > len2) return false;
        
        int[] count = new int[26];
        for (int i = 0; i < len1; i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        if (allZero(count)) return true;
        
        for (int i = len1; i < len2; i++) {
            count[s2.charAt(i) - 'a']--;
            count[s2.charAt(i - len1) - 'a']++;
            if (allZero(count)) return true;
        }
        
        return false;
    }
    
    private boolean allZero(int[] count) {
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) return false;
        }
        return true;
    }
    
//leetcode662
public int widthOfBinaryTree(TreeNode root) {
        return dfs(root, 0, 1, new ArrayList<Integer>(), new ArrayList<Integer>());
    }
    
    public int dfs(TreeNode root, int level, int order, List<Integer> start, List<Integer> end){
        if(root == null)return 0;
        if(start.size() == level){
            start.add(order); end.add(order);
        }
        else end.set(level, order);
        int cur = end.get(level) - start.get(level) + 1;
        int left = dfs(root.left, level + 1, 2*order, start, end);
        int right = dfs(root.right, level + 1, 2*order + 1, start, end);
        return Math.max(cur, Math.max(left, right));
    }
    
//leetcode652
public String solveEquation(String equation) {
    int[] res = evaluateExpression(equation.split("=")[0]),  
  	  res2 = evaluateExpression(equation.split("=")[1]);
    res[0] -= res2[0];
    res[1] = res2[1] - res[1];
    if (res[0] == 0 && res[1] == 0) return "Infinite solutions";
    if (res[0] == 0) return "No solution";
    return "x=" + res[1]/res[0];
}  

public int[] evaluateExpression(String exp) {
    String[] tokens = exp.split("(?=[-+])"); 
    int[] res =  new int[2];
    for (String token : tokens) {
        if (token.equals("+x") || token.equals("x")) res[0] += 1;
	else if (token.equals("-x")) res[0] -= 1;
	else if (token.contains("x")) res[0] += Integer.parseInt(token.substring(0, token.indexOf("x")));
	else res[1] += Integer.parseInt(token);
    }
    return res;
}

树中最大路径：
 public static void printMaxSumPath(TreeNode root)
     {
    	 List<TreeNode> p=new ArrayList<TreeNode>();
    	 ArrayList<ArrayList> p2=new ArrayList<ArrayList>();
    	 FindMaxSumPath(p2,root,0,p,0);
    	 if(p2.size()==0)
    	 {
    		 System.out.println("The tree is empty!");
    		 return;
    	 }
    	 int index=0;
    	 int max=0;
    	 for(int i=0;i<p2.size();i++)// find which path is the max
    	 {
    		 List<TreeNode> temp=new ArrayList<TreeNode>();
    		 temp=p2.get(i);
    		 if(temp.get(temp.size()-1).val>max)
    		 {
    			 max=temp.get(temp.size()-1).val;
    			 index=i;
    		 }
    	 }
    	 System.out.println("The maxSumPath is: ");
    	 List<TreeNode> temp=new ArrayList<TreeNode>();
		 temp=p2.get(index);
    	 for(int i=0;i<temp.size()-1;i++)
    	 {
    		 System.out.print(temp.get(i).val+" ");
    	 }
     }
     
     private static void FindMaxSumPath(ArrayList<ArrayList> p2,TreeNode root,int currentSum,List<TreeNode> p,int level)
     {
    	 if(root==null)
    		 return ;
    	 currentSum+=root.val;
    	 List<TreeNode> p3=new ArrayList<TreeNode>();
    	 for(int i=0;i<level;i++)
    		 p3.add(p.get(i));
    	 p=p3;
    	 p.add(root);
    	 if(root.left==null&&root.right==null)
    	 {
    		 TreeNode sum=new TreeNode(currentSum);//add every sum to the end for selecting
    		 p.add(sum);
    		 p2.add((ArrayList) p);
    	 } 
    	 FindMaxSumPath(p2,root.left,currentSum,p,level+1);
    	 FindMaxSumPath(p2,root.right,currentSum,p,level+1);
     }


        }
        return start;
    }
    
 
