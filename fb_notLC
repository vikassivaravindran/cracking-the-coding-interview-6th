//leetcode560
public int subarraySum(int[] nums, int k) {
        int sum = 0, result = 0;
        Map<Integer, Integer> preSum = new HashMap<>();
        preSum.put(0, 1);
        
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (preSum.containsKey(sum - k)) {
                result += preSum.get(sum - k);
            }
            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }
        
        return result;
    }
    
//leetcode247
public List<String> findStrobogrammatic(int n) {
    return helper(n, n);
}

List<String> helper(int n, int m) {
    if (n == 0) return new ArrayList<String>(Arrays.asList(""));
    if (n == 1) return new ArrayList<String>(Arrays.asList("0", "1", "8"));
    
    List<String> list = helper(n - 2, m);
    
    List<String> res = new ArrayList<String>();
    
    for (int i = 0; i < list.size(); i++) {
        String s = list.get(i);
        
        if (n != m) res.add("0" + s + "0");
        
        res.add("1" + s + "1");
        res.add("6" + s + "9");
        res.add("8" + s + "8");
        res.add("9" + s + "6");
    }
    
    return res;
}

//339
private int depthSum(List<NestedInteger> nestedList, int depth) {  
        int sum = 0;  
        for(NestedInteger nested: nestedList) {  
            if (nested.isInteger()) sum += nested.getInteger() * depth;  
            else sum += depthSum(nested.getList(), depth+1);  
        }  
        return sum;  
    }  
    public int depthSum(List<NestedInteger> nestedList) {  
        return depthSum(nestedList, 1);  
    } 
    
//leetcode40
public List<List<Integer>> combinationSum2(int[] cand, int target) {
    Arrays.sort(cand);
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    List<Integer> path = new ArrayList<Integer>();
    dfs_com(cand, 0, target, path, res);
    return res;
}
void dfs_com(int[] cand, int cur, int target, List<Integer> path, List<List<Integer>> res) {
    if (target == 0) {
        res.add(new ArrayList(path));
        return ;
    }
    if (target < 0) return;
    for (int i = cur; i < cand.length; i++){
        if (i > cur && cand[i] == cand[i-1]) continue;
        path.add(path.size(), cand[i]);
        dfs_com(cand, i+1, target - cand[i], path, res);
        path.remove(path.size()-1);
    }
}

//leetcode336
public List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> ret = new ArrayList<>(); 
    if (words == null || words.length < 2) return ret;
    Map<String, Integer> map = new HashMap<String, Integer>();
    for (int i=0; i<words.length; i++) map.put(words[i], i);
    for (int i=0; i<words.length; i++) {
        // System.out.println(words[i]);
        for (int j=0; j<=words[i].length(); j++) { // notice it should be "j <= words[i].length()"
            String str1 = words[i].substring(0, j);
            String str2 = words[i].substring(j);
            if (isPalindrome(str1)) {
                String str2rvs = new StringBuilder(str2).reverse().toString();
                if (map.containsKey(str2rvs) && map.get(str2rvs) != i) {
                    List<Integer> list = new ArrayList<Integer>();
                    list.add(map.get(str2rvs));
                    list.add(i);
                    ret.add(list);
                    // System.out.printf("isPal(str1): %s\n", list.toString());
                }
            }
            if (isPalindrome(str2)) {
                String str1rvs = new StringBuilder(str1).reverse().toString();
                // check "str.length() != 0" to avoid duplicates
                if (map.containsKey(str1rvs) && map.get(str1rvs) != i && str2.length()!=0) { 
                    List<Integer> list = new ArrayList<Integer>();
                    list.add(i);
                    list.add(map.get(str1rvs));
                    ret.add(list);
                    // System.out.printf("isPal(str2): %s\n", list.toString());
                }
            }
        }
    }
    return ret;
}

private boolean isPalindrome(String str) {
    int left = 0;
    int right = str.length() - 1;
    while (left <= right) {
        if (str.charAt(left++) !=  str.charAt(right--)) return false;
    }
    return true;
}

//leetcode31
public void nextPermutation(int[] A) {
    if(A == null || A.length <= 1) return;
    int i = A.length - 2;
    while(i >= 0 && A[i] >= A[i + 1]) i--; // Find 1st id i that breaks descending order
    if(i >= 0) {                           // If not entirely descending
        int j = A.length - 1;              // Start from the end
        while(A[j] <= A[i]) j--;           // Find rightmost first larger id j
        swap(A, i, j);                     // Switch i and j
    }
    reverse(A, i + 1, A.length - 1);       // Reverse the descending sequence
}

public void swap(int[] A, int i, int j) {
    int tmp = A[i];
    A[i] = A[j];
    A[j] = tmp;
}

public void reverse(int[] A, int i, int j) {
    while(i < j) swap(A, i++, j--);
}

//leetcode381
ArrayList<Integer> nums;
  HashMap<Integer,HashSet<Integer>> loc;
 /** Initialize your data structure here. */
    public RandomizedCollection() {
        nums=new ArrayList<>();
      loc=new HashMap<Integer,HashSet<Integer>>();
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    public boolean insert(int val)
    {
        boolean r=loc.containsKey(val);
        if(loc.containsKey(val))
        {
          loc.get(val).add(nums.size());
          nums.add(val);
        }
        else
        {
          loc.put(val,new HashSet<Integer>());
          loc.get(val).add(nums.size());
          nums.add(val);
        }
        return !r;
        
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    public boolean remove(int val) 
    {
        if(!loc.containsKey(val))
          return false;
        else
        {
          int location=loc.get(val).iterator().next();
          loc.get(val).remove(location);
          if(location<nums.size()-1)
          {
            int last=nums.get(nums.size()-1);
            nums.set(location,last);
            loc.get(last).remove(nums.size()-1);
            loc.get(last).add(location);
          }
          nums.remove(nums.size()-1);
          if(loc.get(val).isEmpty())
            loc.remove(val);
          return true;
        }
    }
    
    /** Get a random element from the collection. */
    public int getRandom() 
    {
        return nums.get((int)(Math.random()*nums.size()));
    } 
    
  //最长增长子序列，打断
  public static int MaxLis(int[] nums)
  {
    int[] dp=new int[nums.length];
    for(int i=0;i<nums.length;i++)
    {
      int maxLis=0;
      for(int j=0;j<i;j++)
      {
        if(nums[i]>nums[j])
          if(maxLis<dp[j])
            maxLis=dp[j];
      }
      dp[i]=maxLis+1;
    }
    
    int res=0;
    for(int i:dp)
      res=Math.max(res,i);
    return res;
  }
  
  //leetcode124
  int maxSum=0;  
  int maxPathSum(TreeNode root) {  
        if(root==null) return 0;  
        //  保存最大值  
        maxSum=root.val;  
        getMaxSum(root);  
        return maxSum;  
    }  
    int getMaxSum(TreeNode root){  
        int l=Integer.MIN_VALUE/4;
        int r=l;
        //  获得左右的最大和;  
        if(root.left!=null)  l=getMaxSum(root.left);  
        if(root.right!=null) r=getMaxSum(root.right);  
        int v=root.val;  
        //  总共6种情况可能产生最大值：v,l,r,v+l,v+r,v+l+r;  
        //  v,v+r,v+l,这三种情况的最大值，是向上连接，可能和父节点产生更大的和  
        int ans=Math.max(v,Math.max(v+l,v+r));  
        int Max=Math.max(Math.max(ans,v+l+r),Math.max(l,r));  
        if(maxSum<Max) 
          maxSum=Max;  
        return ans;  
    }  
    
    //time scheduler有序
    public int timeScheduler(int[] thread, int recover) {  
        if(thread == null || thread.length == 0 ) return 0;  
        if(recover == 0) return thread.length;  
        HashMap<Integer, Integer> hashmap = new HashMap<Integer, Integer>();  
        int time = 0;  
        for(int i=0; i<thread.length; i++){  
            int cur = thread[i];  
            if(!hashmap.containsKey(cur)){  
                hashmap.put(cur, time+recover+1);  
            } else { // contains;  
                int latest = hashmap.get(cur);  
                if(time >= latest) {  
                    hashmap.put(cur,time+recover+1);  
                }else {  
                    i--;  
                }  
            }  
            time++;  
        }  
        return time;  
        }
        
        dot product
        public static void main (String[] args)
	{
		// your code goes here
		Scanner in = new Scanner(System.in);
		int m = in.nextInt();
		int n = in.nextInt();
		int [][] arrm = new int[m][2];
		int [][] arrn = new int[n][2];
		for(int i=0;i<m;i++){
			arrm[i][0] = in.nextInt();
			arrm[i][1] = in.nextInt();
		}
		for(int i=0; i<n;i++){
			arrn[i][0] = in.nextInt();
			arrn[i][1] = in.nextInt();
		}
		int result=0;
      	       for(int i=0;i<arrm.length;i++){
			if(arrm[i][0]==arrn[i][0]){
			 result = result + (arrm[i][1]* arrn[i][1]);
			}
		}
		System.out.println(result);
	}
