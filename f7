package hw3;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

import javax.swing.*;
public class hw3
{
	public static void main(String[] args)
	{
	   int[] num={2,3,1,2,4,3};
	  // System.out.print(minSubArrayLen(7,num));
	   WordDictionary w=new WordDictionary();
	   w.addWord("bad");
	   w.addWord("dad");
	   w.addWord("mad");
	   System.out.print(w.search(".ad"));
	}

	//leetcode235
	 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
	 {
		 if(root.val>p.val&&root.val>q.val)
			 return lowestCommonAncestor(root.left,p,q);
		 else if(root.val<p.val&&root.val<q.val)
			 return lowestCommonAncestor(root.right,p,q);
		 else
			 return root;
	 }
	 
	 //leetcode257
	 public static List<String> binaryTreePaths(TreeNode root) 
	 {
	      List<String> s=new ArrayList<String>();
	      if(root==null)
	    	  return s;
	      String r="";
	      Paths(root,r,s);
	      return s;
	 }
	 
	 private static void Paths(TreeNode root,String s,List<String> r)
	 { 
		 if(root==null)
			 return ;
		 s+=String.valueOf(root.val);
		 s=s+"->";
		 if(root.left==null&&root.right==null)
		 {
			 s=s.substring(0,s.length()-2);
			// System.out.println(s);
		     r.add(s);
		 }
		 Paths(root.left,s,r);
		 Paths(root.right,s,r);
	 }
	 
	 //leetcode252
	 public static boolean Meetings(Interval[] intervals)
	 {
		 HashMap<Integer,Interval> map=new HashMap<Integer,Interval>();
		 int[] s=new int[intervals.length];
		 for(int i=0;i<intervals.length;i++)
		 {
			 if(!map.containsKey(intervals[i].start))
			     map.put(intervals[i].start,intervals[i]);
			 else
				 return false;
			 s[i]=intervals[i].start;
		 }
		 Arrays.sort(s);
		 for(int i=0;(i+1)<intervals.length;i++)
		 {
			 if(map.get(s[i]).end>s[i+1])
				 return false;
		 }
		 return true;
	 }
	 
	 //leetcode209
	 public static int minSubArrayLen(int s, int[] nums) 
	 {
		  boolean has=false;
	      int length=1;
	      int min=nums.length;
	      int sum=0;
	      for(int i=0;i<nums.length;i++)
	      {
	    	  length=1;
	    	  sum=nums[i];
	    	  if(sum>=s)
	    		 return 1;
	    	  for(int j=i+1;j<nums.length;j++)
	    	  {
	    		  sum+=nums[j];
	    		  length++;
	    		  if(sum>=s)
	    		  {
	    			  has=true;
	    			  min=Math.min(min,length);
	    			  break;
	    		  }
	    	  }
	      }
	      if(has)
	         return min;
	      else
	    	  return 0;
	 }
	 
	 //leetcode215
	 public static int findKthLargest(int[] nums, int k) 
	 {
	      Arrays.sort(nums);
	      return nums[nums.length-k+1];
	 }
	 
	 //leetcode210**BFS
	 public static int[] findOrder(int numCourses, int[][] prerequisites) 
	 {
	       if(numCourses==0)
	    	   return null;
	       int[] indegree=new int[numCourses];
	       int[] order=new int[numCourses];
	       int index=0;
	       for(int i=0;i<prerequisites.length;i++)
	    	   indegree[prerequisites[i][0]]++;
	       Queue<Integer> queue=new LinkedList<Integer>();
	       for(int i=0;i<numCourses;i++)
	    	   if(indegree[i]==0)
	    	   {
	    		   order[index++]=i;
	    		   queue.offer(i);
	    	   }
	    	   while(!queue.isEmpty())
	    	   {
	    		   int pre=queue.poll();
	    		   for(int i=0;i<prerequisites.length;i++)
	    		   {
	    			   if(prerequisites[i][1]==pre)
	    			   {
	    				   indegree[prerequisites[i][0]]--;
	    				   if(indegree[prerequisites[i][0]]==0)
	    				   {
	    					   order[index++]=prerequisites[i][0];
	    					   queue.offer(prerequisites[i][0]);
	    				   }
	    			   }
	    		   }
	    	   }
	    	   return (index==numCourses)?order:new int[0];
	 }
	 
	 //leetcode221**
	 public static int maximalSquare(char[][] matrix) 
	 {
	        if(matrix.length==0)
	        	return 0;
	        int m=matrix.length;
	        int n=matrix[0].length;
	        int result=0;
	        int[][] b=new int[m+1][n+1];
	        for(int i=1;i<=m;i++)
	        	for(int j=1;j<=n;j++)
	        	{
	        		if(matrix[i-1][j-1]=='1')
	        		{
	        			b[i][j] = Math.min(Math.min(b[i][j-1] , b[i-1][j-1]), b[i-1][j]) + 1;
	        			result=Math.max(result, b[i][j]);
	        		}
	        	}
	        return result*result;
	 } 
	 
	 //leetcode273
	 final static String[] LESS_THAN_20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
	 final static String[] TENS = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
	 final static String[] THOUSANDS = {"", "Thousand", "Million", "Billion"}; 
	 
	 public static String numberToWords(int num) 
	 {
		 if(num==0)
			 return LESS_THAN_20[0];
		 int i=0;
		 String words="";
		 while(num>0)
		 {
			 if(num%1000!=0)
				 words=helper(num%1000)+THOUSANDS[i]+" "+words;
			 num/=1000;
			 i++;
		 }
		 return words.trim();
	 }
	 
	 private static String helper(int num)
	 {
		 if(num==0)
			 return "";
		 else if(num<20)
			 return LESS_THAN_20[num]+" ";
		 else if(num<100)
			 return TENS[num/10]+" "+helper(num%10);
		 else
			 return LESS_THAN_20[num/100]+" Hundred "+helper(num%100);
	 }
	 
	 //leetcode218
	 public List<int[]> getSkyline(int[][] buildings) 
	 {
		 List<int[]> result=new ArrayList<int[]>();
		 List<int[]> height=new ArrayList<int[]>();
		 for(int[] b:buildings)
		 {
			 height.add(new int[]{b[0],-b[2]});
			 height.add(new int[]{b[1],b[2]});
		 }
		 
		 Collections.sort(height,(a,b) ->{
			 if(a[0]!=b[0])
				 return a[0]-b[0];
			 return a[1]-b[1];
		 });
		 
		 Queue<Integer> pq=new PriorityQueue<>(a,b)->(b-a);
		 pq.offer(0);
		 int prev=0;
		 for(int[] h:height)
		 {
			 if(h[1]<0)
				 pq.offer(-h[1]);
			 else
				 pq.remove(h[1]);
			 int cur=pq.peek();
			 if(prev!=cur)
			 {
				 result.add(new int[]{h[0],cur});
				 prev=cur;
			 }
		 }
		 return result;
	 }
}
//leetcode146
class LRUCache {
    private int cap,count;
    HashMap<Integer,Node> map;
    Node head,tail;
    
    public LRUCache(int capacity) {
        cap=capacity;
        map=new HashMap<Integer,Node>();
        head=new Node(0,0);
        tail=new Node(0,0);
        head.next=tail;
        tail.pre=head;
        head.pre=null;
        tail.next=null;
        count=0;
    }
    
    public void deleteNode(Node node)
    {
    	node.pre.next=node.next;
    	node.next.pre=node.pre;
    }
    
    public void addToHead(Node node)
    {
    	node.next=head.next;
    	node.next.pre=node;
    	node.pre=head;
    	head.next=node;
    }
    public int get(int key) 
    {
        if(map.get(key)!=null)
        {
        	Node node=map.get(key);
        	int result=node.value;
        	deleteNode(node);
        	addToHead(node);
        	return result;
        }
        return -1;
    }
    
    public void put(int key, int value) 
    {
        if(map.get(key)!=null)
        {
        	Node node=map.get(key);
        	node.value=value;
        	deleteNode(node);
        	addToHead(node);
        }
        else
        {
        	Node node=new Node(key,value);
        	map.put(key, node);
        	if(count<cap)
        	{
        		count++;
        		addToHead(node);
        	}
        	else
        	{
        		map.remove(tail.pre.key);
        		deleteNode(tail.pre);
        		addToHead(node);
        	}
        }
    }
}

class Node
{
	int key;
	int value;
	Node pre;
	Node next;
	public Node(int key,int value)
	{
		this.key=key;
		this.value=value;
	}
}
//leetcode211
class WordDictionary {
    Set<char[]> s;
    /** Initialize your data structure here. */
    public WordDictionary() {
        s=new HashSet<char[]>();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) 
    {
        char[] c=word.toCharArray();
        s.add(c);
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) 
    {
        char[] temp=word.toCharArray();
        if(s.contains(temp))
        	return true;
        else
        {
        	int length=temp.length;
        	for(char[] mid:s)
        	{
        		if(mid.length!=length)
        			continue;
        		else
        		{
        			for(int i=0;i<length;i++)
        			{
                        if(temp[i]!=mid[i]&&temp[i]!='.')
        					break;
        				if(i==length-1)
        					return true;
        				if(temp[i]=='.')
        					continue;
        			}
        		}
        	}
        }
        return false;
    }
}

//leetcode211(2)
class WordDictionary2 {
    public class TrieNode {
        public TrieNode[] children = new TrieNode[26];
        public String item = "";
    }
    
    private TrieNode root = new TrieNode();

    public void addWord(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            if (node.children[c - 'a'] == null) {
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.item = word;
    }

    public boolean search(String word) {
        return match(word.toCharArray(), 0, root);
    }
    
    private boolean match(char[] chs, int k, TrieNode node) {
        if (k == chs.length) return !node.item.equals("");   
        if (chs[k] != '.') {
            return node.children[chs[k] - 'a'] != null && match(chs, k + 1, node.children[chs[k] - 'a']);
        } else {
            for (int i = 0; i < node.children.length; i++) {
                if (node.children[i] != null) {
                    if (match(chs, k + 1, node.children[i])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}

class Interval
{
	int start;
	int end;
	Interval()
	{
		start=0;
		end=0;
	}
	Interval(int s, int e)
	{
		start=s;
		end=e;
	}
}
class TreeNode
{
	int val;
	TreeNode left;
	TreeNode right;
	
	TreeNode(int x)
	{
		val=x;
	}
}
