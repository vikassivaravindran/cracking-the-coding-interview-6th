leetcode406:
 Arrays.sort(people,new Comparator<int[]>()
                   {
                       public int compare(int[] a,int[] b)
                       {
                           if(b[0]==a[0])
                               return a[1]-b[1];
                           return b[0]-a[0];
                       }
                   });
反向排序
arraylist.add(index,element),自动后退一个

chap5
^(XOR):same 0,different 1
1:-
>>,前面填补第一个数
>>>,前面填补0
getbit(index):& with 000index0000,结果非0，即有
clearbit(index):
int clearBit(int num,int i)
{
   int mask=~(1<<i);
   return mask&num;
}
i从最后边开始数0
index到最高位清0
int clearBit(int num,int i)
{
   int mask=(1<<i)－1;
   return mask&num;
}
index到最低位清0
int clearBit(int num,int i)
{
   int mask=（－1<<(i+1));
   return mask&num;
}
updateBit
int updataBit(int num,int i,boolean bitIs1)
{
 int value=bitIs1?1:0;
 int mask=~(1<<i);
 return num&mask|value<<i;
}

5.1
insert in special position,from..to..
int insert(int n,int m,int i,int j)
{
   //clear n[i,j]
   int allOnes=~0;
   int left=allOnes<<(j+1);
   int right=(1<<i)-1;
   int mask=left|right;
   int n_clear=n&mask;
   int m_shifted=m<<i;
   return m_shifted|n_clear;
}

5.2 
binary（0-1） to string
static String btos(double x)
	{
	    if(x==0)
	       return "0";
	    else if(x==1)
	       return "1";
	    String s="0.";
	    int i=-1;
	    while(x>0)
	    {
	       if(x>=Math.pow(2,i))
	       {
	         s+=1;
	         x=x-Math.pow(2,i);
	       }
	       else
	       {
	         s+=0;
	       }
	       i--;
	    }
	    if(s.length()>32)
	    	s="ERROR";
	    return s;
	}

5.3
have an int,one 0 can change to 1,count longest 111111.
static int btos(int x)
	{
		if(x==0)
			return 1;
		boolean isContain0=false;
	    String s=Integer.toBinaryString(x);
	    List<Integer> l=new ArrayList<Integer>();
	    int start=0;
	    for(int i=0;i<s.length();i++)
	    {
	    	if(s.charAt(i)=='0'&&i!=s.length()-1)
	    	{
	    		isContain0=true;
	    		l.add(s.substring(start, i).length());
	    		start=i+1;
	    	}
	    	else if(s.charAt(i)=='0')
	    		return s.length();
	    }
	    if(!isContain0)
	    	return s.length();
	    l.add(s.substring(start).length());
	    int sum=l.get(0)+l.get(1);
	    for(int i=1;i<l.size()-1;i++)
	    {
	    	if(l.get(i)+l.get(i+1)>sum)
	    		sum=l.get(i)+l.get(i+1);
	    }
	    return sum+1;
	}

int flipBit(int x)
{
  if(~a==0)
     return Integer.BYTES*8;
    int cur=0;
    int pre=0;
    int max=1;
    while(a!=0)
    {
      if((a&1)==1)
       cur++;
       else
       {
         pre=(a&2)==0?0:cur;
         cur=0;
       }
       max=Math.max(pre+cur+1,max);
       a>>>1;
    }
    return max;
}
5.4
the next smallest & next largest number with the same number of 1
smallest:move 1 to the rightest
largest:left1,right0
getpreBit-reverse
public static boolean GetBit(int n,int index)
{
   return ((n&(1<<(index+1))>0);
}

public static int SetBit(int n,int index,boolean b)
{
   if(b)
      return n|(1<<index);
    return n&(~(1<<index));
}

public static int GetNext(int n)
{
    if(n<=0)
       return -1;
    int index=0;
    int count1=0;
    while(!GetBit(n,index))
      index++;
    while(GetBit(n,index))
    {
       index++;
       count1++;
    }
    n=SetBit(n,index,true);
    index--;
    n=SetBit(n,index,false);
    count1--;
    for(int i=index-1;i>=count1;i--)
     n=SetBit(n,index,false);
     for(int i=count1-1;i>=0;i--)
     n.SetBit(n,index,true);
     return n;
}

public static int GetPre(int n)
{
   if(n<=0)
       return -1;
    int index=0;
    int count0=0;
    while(GetBit(n,index))
      index++;
      while(!GetBit(n,index))
      {
       index++;
       count0++;
      }
      n=SetBit(n,index,false);
      index--;
      n=SetBit(n,index,true);
      count0--;
      for(int i=index-1;i>=count0;i--)
     n=SetBit(n,index,true);
     for(int i=count1-1;i>=0;i--)
     n.SetBit(n,index,false);
     return n;
}

5.5
((n&(n-1)==0):
n is the power of 2,or n==0

5.6
change A to B,how many bits need to be changed?
int count(int x,int y)
{
  int count=0;
  int c=x^y;
  for(int i=c;i!=0;i>>1)
  count+=c&1;
  return count;
}

5.7
对换奇数和偶数位置的bit
int swapOddBits(int x)
{
  return (((x&0xaaaaaaaa)>>>1)|(x&0x55555555)<<1));
}

5.8
void drawLine(byte[] screen,int width,int x1,int x2,int y)
{
 int start_offset=x1%8;
 int first_full=x1/8;
 if(start_offset!=0)
   first_full++;
 
 int end_offset=x2%8;
 int last_full=x2/8;
 if(start_offset!=7)
   last_full--;
 for(int b=first_full;b<last_full;b++)
   screen[(width/8)*y+b]=(byte)0xff;
   
   byte start_mask=(byte)(0xff>>start_offset);
   byte end_mask=(byte)~(0xff>>(end_offset+1));
   
   if((x1/8)==(x2/8))
   { 
   byte mask=(byte)(start_mask&end_mask);
   screen[(width/8)*y+(x1/8)]|=mask;
   }
   else
   {
   if(start_offset!=0)
   {
    int byte_number=(width/8)*y+first_full-1;
    screen[byte_number]|=start_mask;
   }
   if(end_offset!=7)
   {
    int byte_number=(width/8)*y+last_full-1;
    screen[byte_number]|=end_mask;
   }
   }
}
