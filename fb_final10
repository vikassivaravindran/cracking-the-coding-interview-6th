//29
  public int divide(int dividend, int divisor) 
  {
        
    if(divisor==0)
      return Integer.MAX_VALUE;
        int sign=1;
    if((dividend>0&&divisor<0)||(dividend<0&&divisor>0))
      sign=-1;
         long d1=Math.abs((long)dividend);
    long d2=Math.abs((long)divisor);
    if((d1<d2&&sign==1)||d1==0)
      return 0;
    long ans=helper(d1,d2);
    int res;
    if(ans>Integer.MAX_VALUE)
    {
      if(sign==1)
        res=Integer.MAX_VALUE;
      else
        res=Integer.MIN_VALUE;
    }
    else
      res=(int)(ans*sign);
    return res;
  }
  
  private long helper(long d1,long d2)
  {
    if(d1<d2)
      return 0;
    long sum=d2;
    long mul=1;
    while(sum+sum<=d1)
    {
      sum+=sum;
      mul+=mul;
    }
    return mul+helper(d1-sum,d2);
  }

//39
public List<List<Integer>> combinationSum(int[] candidates, int target) 
 {
   List<List<Integer>> res=new ArrayList<>();
   Arrays.sort(candidates);
   helper(res,new ArrayList<Integer>(),candidates, target,0);
   return res;
 }
  
  private void helper(List<List<Integer>> res,ArrayList<Integer> temp,int[] candidates, int target,int pos)
  {
    if(target<0)
      return;
    else if(target==0)
    {
      res.add(new ArrayList<>(temp));
      return;
    }
    else
    {
      for(int i=pos;i<candidates.length;i++)
      {
        temp.add(candidates[i]);
        helper(res,temp,candidates,target-candidates[i],i);
        temp.remove(temp.size()-1);
      }
    }
  }


//53
public int maxSubArray(int[] nums) 
 {
    int max=nums[0];
   int end=nums[0];
   for(int i=1;i<nums.length;i++)
   {
     max=Math.max(nums[i],max+nums[i]);
     end=Math.max(end,max);
   }
   return end;
 }
 
 //leetcode73
   public void setZeroes(int[][] matrix) 
  {
    if(matrix==null||matrix.length==0)
      return;
    int n=matrix.length;
    int m=matrix[0].length;
    boolean rowHas0=false;
    boolean colHas0=false;
    for(int i=0;i<n;i++)
    {
      if(matrix[i][0]==0)
      {
        colHas0=true;
        break;
      }
    }
    for(int i=0;i<m;i++)
    {
      if(matrix[0][i]==0)
      {
        rowHas0=true;
        break;
      }
    }
    
    for(int i=1;i<n;i++)
      for(int j=1;j<m;j++)
      {
        if(matrix[i][j]==0)
        {
          matrix[0][j]=0;
          matrix[i][0]=0;
        }
      }
    
    for(int i=1;i<n;i++)
    {
      if(matrix[i][0]==0)
        Full0Row(matrix,i,n,m);       
    }
    
    for(int i=1;i<m;i++)
    {
      if(matrix[0][i]==0)
        Full0Col(matrix,i,n,m);
    }
    
    if(rowHas0)
    {
      Full0Row(matrix,0,n,m);
    }
    
    if(colHas0)
      Full0Col(matrix,0,n,m);
  }
  
  private void Full0Row(int[][] m1,int k,int n,int m)
  {
    for(int i=0;i<m;i++)
    {
      m1[k][i]=0;
    }
  }
  
  private void Full0Col(int[][] m1,int k,int n,int m)
  {
    for(int i=0;i<n;i++)
    {
      m1[i][k]=0;
    }
  }
  
  //93
    public List<String> restoreIpAddresses(String s) 
 {
    List<String> res=new ArrayList<String>();
   if(s==null||s.length()<4)
     return res;
   int len=s.length();
  for(int i = 1; i<4 && i<len-2; i++)
            for(int j = i+1; j<i+4 && j<len-1; j++)
                for(int k = j+1; k<j+4 && k<len; k++)
       {
         String s1=s.substring(0,i);
         String s2=s.substring(i,j);
         String s3=s.substring(j,k);
         String s4=s.substring(k);
         if(valid(s1)&&valid(s2)&&valid(s3)&&valid(s4))
           res.add(s1+"."+s2+"."+s3+"."+s4);
       }
   return res;
 }
  
  private boolean valid(String s)
  {
    if(s.length()>3||s.length()<1||Integer.parseInt(s)>255||(s.charAt(0)=='0'&&s.length()>1))
      return false;
    else
      return true;
  }
  
  //143
   public void reorderList(ListNode head) {
            if(head==null||head.next==null) return;
            
            //Find the middle of the list
            ListNode p1=head;
            ListNode p2=head;
            while(p2.next!=null&&p2.next.next!=null){ 
                p1=p1.next;
                p2=p2.next.next;
            }
            
            //Reverse the half after middle  1->2->3->4->5->6 to 1->2->3->6->5->4
            ListNode preMiddle=p1;
            ListNode preCurrent=p1.next;
            while(preCurrent.next!=null){
                ListNode current=preCurrent.next;
                preCurrent.next=current.next;
                current.next=preMiddle.next;
                preMiddle.next=current;
            }
            
            //Start reorder one by one  1->2->3->6->5->4 to 1->6->2->5->3->4
            p1=head;
            p2=preMiddle.next;
            while(p1!=preMiddle){
                preMiddle.next=p2.next;
                p2.next=p1.next;
                p1.next=p2;
                p1=p2.next;
                p2=preMiddle.next;
            }
        }
        
        //259
         public int SumSmaller(int[] nums,int target)
  {
    Arrays.sort(nums);
    int count=0;
    for(int i=0;i<nums.length;i++)
    {
      int left=i+1;
      int right=len-1;
      while(left<right)
      {
        int mid=nums[i]+nums[left]+nums[right];
        if(mid<target)
          count+=(right-left);
        else
          right--;
      }
    }
    return count;
  }
  
  //268
   public int missingNumber(int[] nums) 
 {
   int[] res=new int[nums.length+1];
   for(int i=0;i<res.length;i++)
   {
     res[i]=-1;
   }
   for(int i=0;i<nums.length;i++)
   {
     res[nums[i]]=1;
   }
   
   for(int i=0;i<res.length;i++)
   {
     if(res[i]==-1)
       return i;
   }
        return 1;
 }
 
 //350
  public int[] intersect(int[] nums1, int[] nums2) 
 {
   Map<Integer,Integer> map=new HashMap<Integer,Integer>();
   for(int i=0;i<nums1.length;i++)
   {
     if(map.containsKey(nums1[i]))
     {
       int times=map.get(nums1[i]);
       times+=1;
       map.put(nums1[i],times);
     }
     else
     {
       map.put(nums1[i],1);
     }
   }
   List<Integer> res=new ArrayList<Integer>();
   for(int i=0;i<nums2.length;i++)
   {
     if(map.containsKey(nums2[i])&&map.get(nums2[i])>0)
     {
       res.add(nums2[i]);
       int times=map.get(nums2[i]);
       map.put(nums2[i],times-1);
     }
   }
   int[] r=new int[res.size()];
   for(int i=0;i<r.length;i++)
     r[i]=res.get(i);
   return r;
 }
 
 //415
 public String addStrings(String num1, String num2) {
        StringBuilder sb = new StringBuilder();
        int carry = 0;
        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            sb.append((x + y + carry) % 10);
            carry = (x + y + carry) / 10;
        }
        return sb.reverse().toString();
    }
    
    //393
    public boolean validUtf8(int[] data) {
	if(data==null || data.length==0) return false;
	boolean isValid = true;
	for(int i=0;i<data.length;i++) {
		if(data[i]>255) return false; // 1 after 8th digit, 100000000
		int numberOfBytes = 0;
		if((data[i] & 128) == 0) { // 0xxxxxxx, 1 byte, 128(10000000)
			numberOfBytes = 1;
		} else if((data[i] & 224) == 192) { // 110xxxxx, 2 bytes, 224(11100000), 192(11000000)
			numberOfBytes = 2;
		} else if((data[i] & 240) == 224) { // 1110xxxx, 3 bytes, 240(11110000), 224(11100000)
			numberOfBytes = 3;
		} else if((data[i] & 248) == 240) { // 11110xxx, 4 bytes, 248(11111000), 240(11110000)
			numberOfBytes = 4;
		} else {
			return false;
		}
		for(int j=1;j<numberOfBytes;j++) { // check that the next n bytes start with 10xxxxxx
			if(i+j>=data.length) return false;
			if((data[i+j] & 192) != 128) return false; // 192(11000000), 128(10000000)
		}
		i=i+numberOfBytes-1;
	}
	return isValid;
}

／／576
 public int findPaths(int m, int n, int N, int i, int j) {
        if (N <= 0) return 0;
        
        final int MOD = 1000000007;
        int[][] count = new int[m][n];
        count[i][j] = 1;
        int result = 0;
        
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        for (int step = 0; step < N; step++) {
            int[][] temp = new int[m][n];
            for (int r = 0; r < m; r++) {
                for (int c = 0; c < n; c++) {
                    for (int[] d : dirs) {
                        int nr = r + d[0];
                        int nc = c + d[1];
                        if (nr < 0 || nr >= m || nc < 0 || nc >= n) {
                            result = (result + count[r][c]) % MOD;
                        }
                        else {
                            temp[nr][nc] = (temp[nr][nc] + count[r][c]) % MOD;
                        }
                    }
                }
            }
            count = temp;
        }
        
        return result;
    }
    
    //498
     public int[] findDiagonalOrder(int[][] matrix) {
        if (matrix.length == 0) return new int[0];
        int r = 0, c = 0, m = matrix.length, n = matrix[0].length, arr[] = new int[m * n];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = matrix[r][c];
            if ((r + c) % 2 == 0) { // moving up
                if      (c == n - 1) { r++; }
                else if (r == 0)     { c++; }
                else            { r--; c++; }
            } else {                // moving down
                if      (r == m - 1) { c++; }
                else if (c == 0)     { r++; }
                else            { r++; c--; }
            }   
        }   
        return arr;
    }
    
    //694
      int[][] dir = {{1, 0},{0, 1},{-1, 0},{0, -1}};
    char[]  c   = {'D','R','U','L'};
    int n, m;

    boolean[][] vis;

    public int numDistinctIslands(int[][] grid) {
        n = grid.length;
        if (n == 0) return 0;
        m = grid[0].length;
        if (m == 0) return 0;
        vis = new boolean[n][m];
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == 1 && !vis[i][j]) {
                    si = i;
                    sj = j;
                    set.add(dfs(grid, i, j));
                }
            }
        }
        return set.size();
    }

    int si, sj;
    public String dfs(int[][] grid, int i, int j) {
        String ans = "" + ((i - si) * m + (j - sj));
        vis[i][j] = true;
        for (int k = 0; k < 4; ++k) {
            int[] d = dir[k];
            int ni = d[0] + i;
            int nj = d[1] + j;
            if (check(ni, nj) && !vis[ni][nj] && grid[ni][nj] == 1) {
                ans += c[k] + dfs(grid, ni, nj);
            }
        }
        return ans;
    }

    boolean check(int i, int j) {
        return i >= 0 && i < n && j >= 0 && j < m;
    }

//246
 public static boolean isStrobogrammatic(String num)
  {
    if(num==null||num.length()==0)
      return true;
    if(num.length()==1)
      return num.equals("0")||num.equals("1")||num.equals("8");
    else
    {
      Map<Character,Character> pair=new HashMap<Character,Character>();
      pair.put('0','0');
      pair.put('1','1');
      pair.put('6','9');
      pair.put('9','6');
      pair.put('8','8');
      int start=0;
      int end=num.length()-1;
      char[] c=num.toCharArray();
      while(start<=end)
      {
        if(start==end)
          return c[start]=='0'||c[start]=='1'||c[start]=='8';
        else if(pair.containsKey(c[start])&&pair.get(c[start])==c[end])
        {
          start++;
          end--;
        }
        else
          return false;
      }
    }
    return true;
  }
  
  //463
  public int islandPerimeter(int[][] grid) {
        int islands = 0, neighbours = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1) {
                    islands++; // count islands
                    if (i < grid.length - 1 && grid[i + 1][j] == 1) neighbours++; // count down neighbours
                    if (j < grid[i].length - 1 && grid[i][j + 1] == 1) neighbours++; // count right neighbours
                }
            }
        }

        return islands * 4 - neighbours * 2;
    }
    
    //199
      public List<Integer> rightSideView(TreeNode root) 
  {
    List<Integer> res=new ArrayList<Integer> ();
    if(root==null)
      return res;
    Queue<TreeNode> q=new LinkedList<TreeNode>();
    q.add(root);
    while(!q.isEmpty())
    {
      int num=q.size();
      for(int i=0;i<num;i++)
      {
        TreeNode cur=q.poll();
        if(i==num-1)
          res.add(cur.val);
        if(cur.left!=null)
          q.offer(cur.left);
        if(cur.right!=null)
          q.offer(cur.right);
      }
    }
    return res;
  }
  
  //153
    public int findMin(int[] nums) 
   {
     if(nums.length==1)
       return nums[0];
     else if(nums.length==2)
     {
       return Math.min(nums[0],nums[1]);
     }
     else
     {
       int start=0;
       int end=nums.length-1;
       while(start<end)
       {
         int mid=(start+end)/2;
         if(nums[mid-1]>nums[mid])
           return nums[mid];
          else if(nums[mid+1]<nums[mid])
            return nums[mid+1];
         else if(nums[mid]>nums[end])
           start=mid;
         else if(nums[start]>nums[mid])
           end=mid;
         else
           return nums[start];
       }
         return nums[start];
     }
   }
   
   //298
   public int longestConsecutive(TreeNode root) {  
        if(root==null) return 0;  
        rec(root, 1);  
        return max;  
    }  
      
    private void rec(TreeNode n, int c) {  
        if(n.left!=null) {  
            if(n.val+1 == n.left.val) {rec(n.left, c+1); max = Math.max(max, c+1);}  
            else rec(n.left, 1);  
        }  
          
        if(n.right!=null) {  
            if(n.val+1 == n.right.val) {rec(n.right, c+1); max = Math.max(max, c+1);}  
            else rec(n.right, 1);  
        }  
    } 
    
    //251
    public class Vector2D {
     
    private List<List<Integer>> vec2d;
    private int rowId;
    private int colId;
    private int numRows;
     
    public Vector2D(List<List<Integer>> vec2d) {
        this.vec2d = vec2d;
        rowId = 0;
        colId = 0;
        numRows = vec2d.size();
    }
 
    public int next() {
        int ans = 0;
         
        if (colId < vec2d.get(rowId).size()) {
            ans = vec2d.get(rowId).get(colId);
        }
         
        colId++;
         
        if (colId == vec2d.get(rowId).size()) {
            colId = 0;
            rowId++;
        }
         
        return ans;
    }
 
    public boolean hasNext() {
        while (rowId < numRows && (vec2d.get(rowId) == null || vec2d.get(rowId).isEmpty())) {
            rowId++;
        }
         
        return vec2d != null && 
        !vec2d.isEmpty() &&
        rowId < numRows;
    }
}

／／332
public List<String> findItinerary(String[][] tickets) {
    for (String[] ticket : tickets)
        targets.computeIfAbsent(ticket[0], k -> new PriorityQueue()).add(ticket[1]);
    visit("JFK");
    return route;
}

Map<String, PriorityQueue<String>> targets = new HashMap<>();
List<String> route = new LinkedList();

void visit(String airport) {
    while(targets.containsKey(airport) && !targets.get(airport).isEmpty())
        visit(targets.get(airport).poll());
    route.add(0, airport);
}

//658
public List<Integer> findClosestElements(int[] arr, int k, int x) {
    int lo = 0, hi = arr.length - k;
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        if (x - arr[mid] > arr[mid+k] - x)
            lo = mid + 1;
        else
            hi = mid;
    }
    List<Integer> res=new ArrayList<Integer>();
        for(int i=lo;i<lo+k;i++)
            res.add(arr[i]);
    return res;
}
//77
 public static List<List<Integer>> combine(int n, int k) {
		List<List<Integer>> combs = new ArrayList<List<Integer>>();
		combine(combs, new ArrayList<Integer>(), 1, n, k);
		return combs;
	}
	public static void combine(List<List<Integer>> combs, List<Integer> comb, int start, int n, int k) {
		if(k==0) {
			combs.add(new ArrayList<Integer>(comb));
			return;
		}
		for(int i=start;i<=n;i++) {
			comb.add(i);
			combine(combs, comb, i+1, n, k-1);
			comb.remove(comb.size()-1);
		}
	}
	
／／347
public List<Integer> topKFrequent(int[] nums, int k) {

	List<Integer>[] bucket = new List[nums.length + 1];
	Map<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>();

	for (int n : nums) {
		frequencyMap.put(n, frequencyMap.getOrDefault(n, 0) + 1);
	}

	for (int key : frequencyMap.keySet()) {
		int frequency = frequencyMap.get(key);
		if (bucket[frequency] == null) {
			bucket[frequency] = new ArrayList<>();
		}
		bucket[frequency].add(key);
	}

	List<Integer> res = new ArrayList<>();

	for (int pos = bucket.length - 1; pos >= 0 && res.size() < k; pos--) {
		if (bucket[pos] != null) {
			res.addAll(bucket[pos]);
		}
	}
	return res;
}

／／441
public int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = null;
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3)) continue;
            if (max1 == null || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == null || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == null || n > max3) {
                max3 = n;
            }
        }
        return max3 == null ? max1 : max3;
    }
