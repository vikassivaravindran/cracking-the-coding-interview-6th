//leetcode283
    public static void moveZeroes(int[] nums) 
    {
    	if(nums.length<2)
    		return;
        int start=0;
        int next=start+1;
        int count=0;
        while(next<nums.length)
        {
        	if(nums[start]!=0)
        	{
        		start++;
        		next=start+1;
        	}
        	else
        	{
        		if(nums[next]==0)
        			next++;
        		else
        		{
        			swap(nums,start,next);
        			count++;
        			start=count;
        			next=next+1;
        		}
        	}
        }
    }
    
    //solution2
    public void moveZeroes(int[] nums) {
    if (nums == null || nums.length == 0) return;        

    int insertPos = 0;
    for (int num: nums) {
        if (num != 0) nums[insertPos++] = num;
    }        

    while (insertPos < nums.length) {
        nums[insertPos++] = 0;
    }
}
    
    private static void swap(int[] arr, int i,int j)
    {
    	int temp=arr[i];
    	arr[i]=arr[j];
    	arr[j]=temp;
    }
    
    //leetcode621
    public static int leastInterval(char[] tasks, int n) 
    {
        int[] c=new int[26];
        for(char t:tasks)
        	c[t-'A']++;
        Arrays.sort(c);
        int i=25;
        while(i>=0&&c[i]==c[25])
        	i--;
        return Math.max(tasks.length, (c[25]-1)*(n+1)+25-i);
    }
    
    //leetcode17
    public static List<String> letterCombinations(String digits) 
    {
        String[] dic={" ","","abc","def","ghi","jkl","mno","pqrs","tuv","wyxz"};
        List<String> l=new ArrayList<String> ();
        if(digits==null||digits.length()==0)
        {
        	l.add(digits);
        	return l;
        }
        helper(digits,dic,l,"");
        return l;
    }
    
    private static void helper(String digits,String[] dic,List<String> l,String s)
    {
    	if(digits.length()==0||digits==null)
    		l.add(s);
    	else
    	{
    		int index=Integer.parseInt(digits.substring(0,1));
    		String temp=dic[index];
    		for(int i=0;i<temp.length();i++)
    		{
    			helper(digits.substring(1),dic,l,s+String.valueOf(temp.charAt(i)));
    		}
    	}
    }
    
    //leetcode91
    public static int numDecodings(String s) 
    {
        if(s==null||s.length()==0)
        	return 0;
        int len=s.length();
        int[] dp=new int[len+1];
        dp[len]=1;
        dp[len-1]=s.charAt(len-1)!='0'?1:0;
        for(int i=len-2;i>=0;i--)
        {
        	if(s.charAt(i)=='0')
        		continue;
        	else
        		dp[i]=(Integer.parseInt(s.substring(i,i+2))<=26)?dp[i+1]+dp[i+2]:dp[i+1];
        }
        
        return dp[0];
    }
    
    //leetcode301 **dfs
    public static List<String> removeInvalidParentheses(String s) 
    {
        List<String> l=new ArrayList<String>();
        if(s==null||s.length()==0)
        	return l;
        char[] par={'(',')'};
        remove(s,l,0,0,par);
        return l;
    }
    
    private static void remove(String s,List<String> l,int last_i,int last_j,char[] par)
    {
    	for(int stack=0,i=last_i;i<s.length();i++)
    	{
    		if(s.charAt(i)==par[0])
    			stack++;
    		if(s.charAt(i)==par[1])
    			stack--;
    		if(stack>=0)
    			continue;
    		for(int j=last_j;j<=i;j++)
    		{
    			if(s.charAt(j)==par[1]&&(j==last_j||s.charAt(j-1)!=par[1]))
    				remove(s.substring(0, j)+s.substring(j+1),l,i,j,par);
    		}
    		return;
    	}
    	
    	String reversed=new StringBuilder(s).reverse().toString();
    	if(par[0]=='(')
    		remove(reversed,l,0,0,new char[]{')','('});
    	else
    		l.add(reversed);
    }
    
    //leetcode67
    public static String addBinary(String a, String b) 
    {
        StringBuilder sb=new StringBuilder();
        int lenA=a.length()-1;
        int lenB=b.length()-1;
        int c=0;
        while(lenA>=0||lenB>=0)
        {
        	int sum=c;
        	if(lenB>=0)
        		sum+=b.charAt(lenB--)-'0';
        	if(lenA>=0)
        		sum+=a.charAt(lenA--)-'0';
        	sb.append(sum%2);
        	c=sum/2;
        }
        if(c!=0)
        	sb.append(c);
        return sb.reverse().toString();
    }
 
    //leetcode273
    private static final String[] Less20={"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
    private static final String[] tens={"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    private static final String[] thounsands={"", "Thousand", "Million", "Billion"};
    public static String numberToWords(int num) 
    {
    	if(num==0)
    		return "Zero";
    	int i=0;
    	String words="";
    	while(num>0)
    	{
    		if(num%1000!=0)
    			words=helper(num%1000)+thounsands[i]+" "+words;
    		num/=1000;
    		i++;
    	}
    	return words.trim();
    }
    
    private static String helper(int num)
    {
    	if(num==0)
    		return "";
    	else if(num<20)
    		return Less20[num]+" ";
    	else if(num<100)
    		return tens[num/10]+" "+helper(num%10);
    	else
    		return Less20[num]+" "+"Hundred"+helper(num%100);
    }
    
    //leetcode325
    public static int Find(int[] nums,int k)
    {
    	if(nums.length==0)
    		return 0;
    	Map<Integer,Integer> map=new HashMap<Integer,Integer>();
    	int sum=0;
    	int max=Integer.MIN_VALUE;
    	map.put(0, 0);
    	for(int i=0;i<nums.length;i++)
    	{
    		sum+=nums[i];
    		if(map.containsKey(sum-k))
    			max=Math.max(max,i-map.get(sum-k)+1);
    		if(!map.containsKey(sum))
    			map.put(sum, i+1);
    	}
    	return max;
    }
    //leetcode253
    public int minMeetingRooms(Interval[] intervals) {
        Arrays.sort(intervals, (a, b) -> a.start - b.start);
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        
        for (Interval i : intervals) {
            if (!heap.isEmpty() && i.start >= heap.peek()) {
                heap.poll();
            }
            heap.offer(i.end);
        }
        return heap.size();
    }
    
    class Interval {
	      int start;
	      int end;
	      Interval() { start = 0; end = 0; }
	      Interval(int s, int e) { start = s; end = e; }
	  }
    
    
