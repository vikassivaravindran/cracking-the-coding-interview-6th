//leetcode1
	public static int[] Sum2(int[] nums,int target)
	{
		int[] result=new int[2];
		int aim=0;
		Map<Integer,Integer> map=new HashMap<Integer,Integer>();
		for(int i=0;i<nums.length;i++)
		{
			if(map.containsKey(nums[i]))
				map.put(nums[i], map.get(nums[i])+1);
			else
				map.put(nums[i], 1);
		}
		for(int i=0;i<nums.length;i++)
		{
			aim=target-nums[i];
			map.put(nums[i], map.get(nums[i])-1);
			if(map.containsKey(aim)&&map.get(aim)>0)
			{
				result[0]=i;
				break;	
			}
			map.put(nums[i], map.get(nums[i])+1);
		}
		for(int i=0;i<nums.length;i++)
		{
			if(nums[i]==aim)
				result[1]=i;
		}
		
		return result;
	}	
	
	//leetcode10
   public static boolean isMatch(String s, String p) 
   {
        if(s==null||p==null)
        	return false;
        boolean[][] dp=new boolean[s.length()+1][p.length()+1];
        dp[0][0]=true;
        for(int i=0;i<p.length();i++)
        	if(p.charAt(i)=='*'&&dp[0][i-1])
        		dp[0][i+1]=true;
        for(int i=0;i<s.length();i++)
        	for(int j=0;j<p.length();j++)
        	{
        		if(p.charAt(j)=='.')
        			dp[i+1][j+1]=dp[i][j];
        		if(p.charAt(j)==s.charAt(i))
        			dp[i+1][j+1]=dp[i][j];
        		if(p.charAt(j)=='*')
        		{
        			if(p.charAt(j-1)!=s.charAt(i)&&p.charAt(j-1)!='.')
        				dp[i+1][j+1]=dp[i+1][j-1];//empty
        			else
        				dp[i+1][j+1]=(dp[i+1][j] || dp[i][j+1] || dp[i+1][j-1]);//single/multiple/empty
        		}	
        	}
        return dp[s.length()][p.length()];
    }
	
   //leetcode161
 /*  public static boolean isOneEditDistance(String s, String t)
   {
	   if(Math.abs(s.length()-t.length())>1)
		   return false;
	   else if(s.length()==t.length())
	   {
		   int diff=0;
		   for(int i=0;i<s.length();i++)
			   if(s.charAt(i)!=t.charAt(i))
				   diff++;
		   return diff==1;
	   }
	   else
	   {
		   if (s.length() < t.length()) {  
		        String tmp = s;  
		        s = t;  
		        t = tmp;  
		    }  //s is longer
		   for(int i=0;i<t.length();i++)
		   {
			   if(s.charAt(i)!=t.charAt(i))
				   return s.substring(i+1)==t.substring(i);
		   }
	   }	   
   }*/
   
   //leetcode121
   public static int maxProfit(int[] prices) 
   {
       int maxCur=0,maxSoFar=0;
       for(int i=1;i<prices.length;i++)
       {
    	   maxCur=Math.max(0, maxCur+=prices[i]-prices[i-1]);
    	   maxSoFar=Math.max(maxCur, maxSoFar);
       }
       return maxSoFar;
   }
   
   //leetcode282
   public static List<String> addOperators(String num, int target) 
   {
       List<String> result=new ArrayList<String>();
       if(num==null||num.length()==0)
    	   return result;
       helper(result,"",num,target,0,0,0);
       return result;
   }
   
   private static void helper(List<String> result,String path,String num,int target,int pos,long eval,long multed)
   {
	   if(pos==num.length())
	   {
		   if(target==eval)
			   result.add(path);
		   return;
	   }
	   
	   for(int i=pos;i<num.length();i++)
	   {
		   if(i!=pos&&num.charAt(pos)=='0')
			   break;
		   long cur=Long.parseLong(num.substring(pos,i+1));
		   if(pos==0)
			   helper(result,path+cur,num,target,i+1,cur,cur);
		   else
		   {
			   helper(result,path+"+"+cur,num,target,i+1,eval+cur,cur);
			   helper(result,path+"-"+cur,num,target,i+1,eval-cur,-cur);
			   helper(result,path+"*"+cur,num,target,i+1,eval-multed+cur*multed,multed*cur);
		   }
	   }
   }
   
   //leetcode76
 /*  public String minWindow(String s, String t) {
       if (s == null || s.length() == 0) return "";  
       Map<Character, Integer> map = new HashMap<>();  
       for (int i = 0; i < t.length(); i++) {  
           char c = t.charAt(i);  
           map.put(c, map.getOrDefault(c, 0) + 1);  
       }  
       int l = 0;  
       int cnt = 0;  
       int start = 0;  
       int minLength = s.length() + 1;  
       for (int r = 0; r < s.length(); r++) {  
           if (map.containsKey(s.charAt(r))) {  
               map.put(s.charAt(r), map.get(s.charAt(r)) - 1);  
               if (map.get(s.charAt(r)) >= 0) cnt++;  
               while (cnt == t.length()) {  
                   if (r - l + 1 < minLength) {  
                       minLength = r - l + 1;  
                       start = l;  
                   }  
                   if (map.containsKey(s.charAt(l))) {  
                       map.put(s.charAt(l), map.get(s.charAt(l)) + 1);  
                       if(map.get(s.charAt(l))>0)
                           cnt--;  
                   }  
                   l++;  
               }  
           }  
       }  
       return minLength > s.length() ? "" : s.substring(start, start + minLength);
   }*/
   
   //leetcode543
   public int diameterOfBinaryTree(TreeNode root) {
       if(root == null){
           return 0;
       }
      int dia = depth(root.left) + depth(root.right);
      int ldia = diameterOfBinaryTree(root.left);
      int rdia = diameterOfBinaryTree(root.right);
      return Math.max(dia,Math.max(ldia,rdia));
       
   }
   public int depth(TreeNode root){
       if(root == null){
           return 0;
       }
       return 1+Math.max(depth(root.left), depth(root.right));
   }
	//leetcode277
	/*
	public static int findCelebrity(int n)
	{
		if(n<=0)
			throw new IllegalArgumentException("n is invalid");
		if(n==1)
			return 0;
		Stack<Integer> stack=new Stack<Integer>();
		for(int i=0;i<n;i++)
			stack.push(i);
		while(stack.size()>1)
		{
			int i=stack.pop();
			int j=stack.pop();
			if(knows(i,j))
				stack.push(j);
			else
				stack.push(i);
		}
		
		int j=stack.pop();
		for(int i=0;i<n;i++)
		{
			if(i!=j)
			{
				if(!knows(i,j)||knows(j,i))
					return -1;
			}
		}
		
		return j;
	}
	*/
}

//leetcode157
/*
class Solution extends Reader4
{
	public int read(char[] buf, int n) {
        int offset = 0;
        char[] buf4 = new char[4];
        while(true) {
            int count = read4(buf4);
            if (count == 0) {
                break;
            }
            for (int i = 0; i < count && offset < n; i ++) {
                buf[offset] = buf4[i];
                offset ++;
            }
        }
        return offset;
    }
}
*/

class WordDictionary {
	
	public class TrieNode
	{
		public TrieNode[] children=new TrieNode[26];
		public String item="";
	}
	
	public static TrieNode root;
	

    /** Initialize your data structure here. */
    public WordDictionary() 
    {
       root=new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode node=root;
        for(char c:word.toCharArray())
        {
        	if(node.children[c='a']==null)
        		node.children[c-'a']=new TrieNode();
        	node=node.children[c-'a'];
        }
        node.item=word;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public static boolean search(String word) 
    {
        return match(word.toCharArray(),0,root);
    }
    
    private static boolean match(char[] chs,int k,TrieNode node)
    {
    	if(k==chs.length)
    		return !node.item.equals("");
    	if(chs[k]!='.')
    		return node.children[chs[k]-'a']!=null&&match(chs, k + 1, node.children[chs[k] - 'a']);
    	else
    	{
    		for(int i=0;i<node.children.length;i++)
    		{
    			if (node.children[i] != null) {
                    if (match(chs, k + 1, node.children[i])) {
                        return true;
                    }
                }
    		}
    	}
    	return false;
    }
}

//leetcode158
/*class Solution extends Reader4 {  
    /** 
     * @param buf Destination buffer 
     * @param n   Maximum number of characters to read 
     * @return    The number of characters read 
     
    int index = 0;  
    int count = 0;  
    char[] buffer4 = new char[4];  
    public int read(char[] buf, int n) {  
        int actRead = 0;  
        boolean isEnd = false;  
        while(!isEnd && actRead<n)  
        {  
            if(count == 0)  
            {  
                count = read4(buffer4);  
                if(count<4)  
                    isEnd = true;  
            }  
            while(count>0 && actRead<n)  
            {  
                buf[actRead] = buffer4[index];  
                actRead++;  
                index++;  
                count--;  
                index = index%4;  
            }  
        }  
        return actRead;  
    }  
}  */

//leetcode341
/*class NestedIterator implements Iterator<Integer> {
    Stack<NestedInteger> stack=new Stack<NestedInteger>();
    
    public NestedIterator(List<NestedInteger> nestedList) {
        for(int i=nestedList.size()-1;i>=0;i--)
        	stack.push(nestedList.get(i));
    }

    @Override
    public Integer next() {
        return stack.pop().getInteger();
    }

    @Override
    public boolean hasNext() 
    {
        while(!stack.isEmpty())
        {
        	NestedInteger curr=stack.peek();
        	if(curr.isInteger())
        		return true;
        	stack.pop();
        	for(int i=curr.getList().size()-1;i>=0;i--)
        		stack.push(curr.getList().get(i));
        }
        return false;
    }
}*/
