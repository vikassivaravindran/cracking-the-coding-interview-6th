package hw3;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;

import javax.swing.*;
public class hw3
{
	public static void main(String[] args)
	{
		
	}
	
	//leetcode33
	public static int search(int[] nums, int target) 
	  {
	        return search(nums,nums.length,target);
	  }
	  
	 private static int search(int []A, int n, int target) {
	        int lo=0,hi=n-1;
	        while(lo<hi){
	            int mid=(lo+hi)/2;
	            if(A[mid]>A[hi]) lo=mid+1;
	            else hi=mid;
	        }
	        int rot=lo;
	        lo=0;hi=n-1;
	        // The usual binary search and accounting for rotation.
	        while(lo<=hi){
	            int mid=(lo+hi)/2;
	            int realmid=(mid+rot)%n;
	            if(A[realmid]==target)
	              return realmid;
	            if(A[realmid]<target)
	              lo=mid+1;
	            else 
	              hi=mid-1;
	        }
	        return -1;
	    }
	 
	 //leetcode79
	 static boolean[][] visited;
	  public static boolean exist(char[][] board, String word) 
	  {
	        visited=new boolean[board.length][board[0].length];
	        for(int i=0;i<board.length;i++)
	          for(int j=0;j<board[0].length;j++)
	            if(word.charAt(0)==board[i][j]&&search(board,word,i,j,0))
	              return true;
	        return false;
	  }
	  
	  private static boolean search(char[][] board, String word,int i,int j, int index)
	  {
	    if(index==word.length())
	       return true;
	    if(i>=board.length||i<0||j>=board[0].length||j<0||board[i][j]!=word.charAt(index)||visited[i][j])
	      return false;
	    visited[i][j]=true;
	    if(search(board,word,i-1,j,index+1)||search(board,word,i,j-1,index+1)||search(board,word,i+1,j,index+1)||search(board,word,i,j+1,index+1))
	      return true;
	    visited[i][j]=false;
	    return false;
	  }
	  
	  //leetcode236
	  public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
	  {
	         if(root==null||root==p||root==q)
	           return root;
	         TreeNode left=lowestCommonAncestor(root.left,p,q);
	         TreeNode right=lowestCommonAncestor(root.right,p,q);
	         if(left!=null&&right!=null)
	           return root;
	         return left!=null?left:right;
	  }
	  
	  //leetcode494
	  public static int findTargetSumWays(int[] nums, int S) 
	  {
	       int sum=0;
	       for(int i:nums)
	         sum+=i;
	       if(S>sum||S<-sum)
	         return 0;
	       int[] dp=new int[2*sum+1];
	       dp[0+sum]=1;
	       for(int i=0;i<nums.length;i++)
	       {
	         int[] next=new int[2*sum+1];
	         for(int k=0;k<2*sum+1;k++)
	         {
	           if(dp[k]!=0)
	           {
	             next[k+nums[i]]+=dp[k];
	             next[k-nums[i]]+=dp[k];
	           }
	         }
	         dp=next;
	       }
	      return dp[sum+S];
	  }
	  
	  //leetcode238
	  public static int[] productExceptSelf(int[] nums) 
	  {
	       int[] result=new int[nums.length];
	       result[0]=1;
	       for(int i=1;i<nums.length;i++)
	       {
	         result[i]=result[i-1]*nums[i-1];
	       }
	       int right=1;
	       for(int i=nums.length-1;i>=0;i--)
	       {
	         result[i]*=right;
	         right*=nums[i];
	       }
	       return result;
	  }
	  
	  //leetcode477
	  public static int totalHammingDistance(int[] nums) 
	  {
		  int t=0;
	       int n=nums.length;
	       for(int j=0;j<32;j++)
	       {
	         int bitCount=0;
	         for(int i=0;i<n;i++)
	           bitCount+=(nums[i]>>j)&1;
	         t+=bitCount*(n-bitCount);
	       }
	       return t;
	   }

//leetcode523
public static  boolean checkSubarraySum(int[] nums, int k) 
{
     Map<Integer,Integer> map=new HashMap<Integer,Integer>();
     map.put(0,-1);
     int runningSum=0;
     for(int i=0;i<nums.length;i++)
     {
       runningSum+=nums[i];
       if(k!=0)
         runningSum%=k;
       Integer prev=map.get(runningSum);
       if(prev!=null)
       {
         if(i-prev>1)//mid interval
           return true;
       }
       else
         map.put(runningSum,i);
     }
     return false;
}

//leetcode28
      public static int strStr(String haystack, String needle) 
{
      if(haystack.length()<needle.length())
        return -1;
      if(haystack.length()==0&&needle.length()==0)
        return 0;
      if(needle==null||haystack==null)
        return -1;
      int m=needle.length();
      for(int i=0;(i+m)<=haystack.length();i++)
      {
        String temp=haystack.substring(i,i+m);
        if(temp.equals(needle))
          return i;
      }
      return -1;
}
      
      //leetcode20
      public static boolean isValid(String s) 
      {
            Stack<Character> stack=new Stack<Character>();
            for(int i=0;i<s.length();i++)
            {
              if(s.charAt(i)=='('||s.charAt(i)=='['||s.charAt(i)=='{')
                stack.push(s.charAt(i));
              else
              {
                if(!stack.isEmpty())
                {
                char temp=stack.pop();
                if(s.charAt(i)==')'&&temp!='(')
                  return false;
                if(s.charAt(i)=='}'&&temp!='{')
                  return false;
                if(s.charAt(i)==']'&&temp!='[')
                  return false;
                }
                else
                  return false;
              }
            }
            return stack.isEmpty();
      }
      
      //leetcode461
      public static int hammingDistance(int x, int y) 
      {
         int s=x^y;
         int result=0;
         while(s!=0)
         {
           result+=(s&1);
           s=s>>1;
         }
         return result;
     }
      
      //leetcode235
      public static TreeNode lowestCommonAncestor2(TreeNode root, TreeNode p, TreeNode q) 
      {
           if(root.val>p.val&&root.val>q.val)
             return lowestCommonAncestor(root.left,p,q);
           else if(root.val<p.val&&root.val<q.val)
             return lowestCommonAncestor(root.right,p,q);
           else
             return root;
       }
}

	 class TreeNode 
	 {
	     int val;
	     TreeNode left;
	     TreeNode right;
	     TreeNode(int x) 
	     { 
	       val = x; 
	     }
	 }
