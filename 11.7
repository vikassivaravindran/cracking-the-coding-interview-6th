279
public int numSquares(int n) {
        int[] dp=new int[n+1];
         Arrays.fill(dp, Integer.MAX_VALUE);
         dp[0]=0;
         for(int i=1;i<=n;i++)
         {
        	 int min=Integer.MAX_VALUE;
        	 int j=1;
        	 while(i-j*j>=0)
        	 {
        		 min=Math.min(min, dp[i-j*j]+1);
        		 j++;
        	 }
        	 dp[i]=min;
         }
         return dp[n];
    }
    
75
public void sortColors(int[] nums) {
        int p1=0;
         int p2=nums.length-1;
         int index=0;
         while(index<=p2)
         {
        	 if(nums[index]==0)
        	 {
        		 nums[index]=nums[p1];
        		 nums[p1]=0;
        		 p1++;
        	 }
        	 if(nums[index]==2)
        	 {
        		 nums[index]=nums[p2];
        		 nums[p2]=2;
        		 p2--;
        		 index--;
        	 }
        	 index++;
         }
         
    }
    
 300
 public int lengthOfLIS(int[] nums) 
    {
        int[] maxLens=new int[nums.length];
         int maxLen=0;
         for(int i=0;i<nums.length;i++)
         {
        	 for(int j=0;j<i;j++)
        	 {
        		 if(nums[j]<nums[i])
        			 maxLens[i]=Math.max(maxLens[i], maxLens[j]+1);
        	 }
             maxLen=Math.max(maxLen,maxLens[i]+1);
         }
         return maxLen;
    }
    
416
public static boolean canPartition(int[] nums) 
     {
         int sum=0;
         for(int i=0;i<nums.length;i++)
         {
        	 sum+=nums[i];
         }
         if(sum%2!=0)
        	 return false;
         int target=sum/2;
         boolean[] dp=new boolean[target+1];
         dp[0]=true;
         for(int i=1;i<=nums.length;i++)
        	 for(int j=target;j>=nums[i-1];j--)
        		 dp[j]=dp[j]||dp[j-nums[i-1]];
         return dp[target];
     }
     
 240
  public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {
            return false;
        }
        int col = matrix[0].length-1;
        int row = 0;
        while(col >= 0 && row <= matrix.length-1) {
            if(target == matrix[row][col]) {
                return true;
            } else if(target < matrix[row][col]) {
                col--;
            } else if(target > matrix[row][col]) {
                row++;
            }
        }
        return false;
    }
    
151
public String reverseWords(String s) {
        String[] parts = s.trim().split("\\s+");
    	 String out = "";
    	 for (int i = parts.length - 1; i > 0; i--) {
    	     out += parts[i] + " ";
    	 }
    	 return out + parts[0];
    }
    
468
class Solution {
    public String validIPAddress(String IP) {
	if(isValidIPv4(IP)) return "IPv4";
	else if(isValidIPv6(IP)) return "IPv6";
	else return "Neither";
}

public boolean isValidIPv4(String ip) {
	if(ip.length()<7) return false;
	if(ip.charAt(0)=='.') return false;
	if(ip.charAt(ip.length()-1)=='.') return false;
	String[] tokens = ip.split("\\.");
	if(tokens.length!=4) return false;
	for(String token:tokens) {
		if(!isValidIPv4Token(token)) return false;
	}
	return true;
}
public boolean isValidIPv4Token(String token) {
	if(token.startsWith("0") && token.length()>1) return false;
	try {
		int parsedInt = Integer.parseInt(token);
		if(parsedInt<0 || parsedInt>255) return false;
		if(parsedInt==0 && token.charAt(0)!='0') return false;
	} catch(NumberFormatException nfe) {
		return false;
	}
	return true;
}
	
public boolean isValidIPv6(String ip) {
	if(ip.length()<15) return false;
	if(ip.charAt(0)==':') return false;
	if(ip.charAt(ip.length()-1)==':') return false;
	String[] tokens = ip.split(":");
	if(tokens.length!=8) return false;
	for(String token: tokens) {
		if(!isValidIPv6Token(token)) return false;
	}
	return true;
}
public boolean isValidIPv6Token(String token) {
	if(token.length()>4 || token.length()==0) return false;
	char[] chars = token.toCharArray();
	for(char c:chars) {
		boolean isDigit = c>=48 && c<=57;
		boolean isUppercaseAF = c>=65 && c<=70;
		boolean isLowerCaseAF = c>=97 && c<=102;
		if(!(isDigit || isUppercaseAF || isLowerCaseAF)) 
			return false;
	}
	return true;
}
}
