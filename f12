//leetcode65
	public static boolean isNumber2(String s)
	{
        return s.matches("^ *[+-]?(([0-9]+\\.?)|([0-9]*\\.[0-9]+))(e[+-]?[0-9]+)? *$");
    }
	
	//leetcode301**dfs
	public static List<String> removeInvalidParentheses(String s) 
    {
        List<String> ans=new ArrayList<String>();
        remove(s,ans,0,0,new char[]{'(',')'});
        return ans;
    }
	
	public static void remove(String s, List<String> ans, int last_i,int last_j,char[] par)
	{
		for(int stack=0,i=last_i;i<s.length();i++)
		{
			if(s.charAt(i)==par[0])
				stack++;
			if(s.charAt(i)==par[1])
				stack--;
			if(stack>=0)
				continue;
			for(int j=last_j;j<=i;j++)
			{
				if(s.charAt(j)==par[1]&&(j==last_j||s.charAt(j-1)!=par[1]))
					remove(s.substring(0, j)+s.substring(j+1),ans,i,j,par);
			}
			return;
		}
		
		String reversed=new StringBuilder(s).reverse().toString();
		if(par[0]=='(')
			remove(reversed,ans,0,0,new char[]{')','('});
		else
			ans.add(reversed);
	}
	
	//leetcode410 binary search
    public static int splitArray(int[] nums, int m) 
    {
        int max=0;
        long sum=0;
        for(int num:nums)
        {
        	max=Math.max(max, num);
        	sum+=num;
        }
        if(m==1)
        	return (int)sum;
        long l=max;//l=10
        long r=sum;//sum=32
        while(l<=r)
        {
        	long mid=(r+l)/2;
        	if(valid(mid,nums,m))
        		r=mid-1;
        	else
        		l=mid+1;
        }
        return (int)l;
    }
    
    private static boolean valid(long target,int[] nums,int m)
    {
    	int count=1;
    	long total=0;
    	for(int num:nums)
    	{
    		total+=num;
    		if(total>target)
    		{
    			total=num;
    			count++;
    			if(count>m)
    				return false;
    		}
    	}
    	return true;
    }
